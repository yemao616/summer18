# Given a string, find if there is any sub-sequence that repeats itself.
# A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

# Input:
# string

# Output:

# 0/1
# 0 -> No
# 1 -> Yes 
# Example:

# abab ------> yes, ab is repeated. So, return 1. 
# abba ------> No, a and b follow different order. So, return 0. 
# NOTE : sub-sequence length should be greater than or equal to 2


#  ~ref: https://www.geeksforgeeks.org/repeated-subsequence-length-2/


# class Solution:
    # @param A : string
    # @return an integer
    def anytwo(self, A):
        A = list(A)
        n = len(A)
        freq = {}
        for i in xrange(n):
            x = A[i]
            if x in freq:
                freq[x] += 1
            else:
                freq[x] = 1
            
            if freq[A[i]] > 3:
                return 1
     
        # In-place remove non-repeating characters from the string
        k = 0
        for i in xrange(n):
            if freq[A[i]] > 1:
                A[k] = A[i]
                k += 1
     
        s = A[:k]
        if s == s[::-1]:
            # special case - if length is odd return true if the middle characer is same as previous one
            if k & 1:
                return int(A[k/2] == A[k/2 - 1])
            return 0
        return 1